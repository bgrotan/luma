****************
Luma Development
****************

Getting started
===============
Luma uses git_ for revision control. To get started developing for Luma you
need to install some required development tools. These include:

- git_ 
- python_ >= *2.7* < *3*
- python-ldap_ >= *2.3.10*
- PyQt4_ >= *4.8.3*

.. _git: http://git-scm.com/
.. _python: http://www.python.org/
.. _python-ldap: http://python-ldap.org/
.. _PyQt4: http://www.riverbankcomputing.com/software/pyqt/download

To checkout the Luma source code you run::

    $ git clone protocol://path.to.luma/repository/luma.git luma

Then you should create your own branch from the ``develop`` branch::

    $ git fetch
    $ git checkout develop
    $ git chekcout -b my-luma-feature develop

.. todo::
   Python versions should be tested for compability. Development is done with
   the python 2.7.x branch, but it should be tested againt other (earlier)
   version aswell (at least the 2.6.x branch).

Repository structure
====================

::

    .
    |-- bin
    |-- contrib
    |-- data
    |-- doc (1)
    |-- luma (2)
    |   |-- base
    |   |   |-- backend
    |   |   |-- gui
    |   |   |-- model
    |   |   `-- util
    |   |-- plugins
    |   `-- test
    |-- resources (3)
    |   |-- forms
    |   |-- i18n
    |   `-- icons
    |-- setup (4)
    |-- tools (5)
    |-- luma.pro (6)
    `-- luma.qrc (7)


1. *Luma documentation files*. All Luma documentation files should be placed 
   here.
2. *Luma source code files*. All Luma python modules should be placed in an 
   appropriate python package in this location.

    - ``base.backend``: Contains modules for the core functionality, including
      ldap connection and operation wrappers.
    - ``base.gui``: Contains all gui modules.
    - ``base.util``: Conatins all utility modules that can be used for both the
      base modules aswell as the plugins.
    - ``plugins``: Contains all plugins included in the core application.

3. *Luma resource files*. All resource files should be placed here. This
   include all icons (``icons``), all Qt4 Linguist files (``i18n``) and all Qt4
   Designer files (``forms``). All files in the resource folder will be 
   included as input for the ``lumarcc.py`` script when generating runtime 
   resources for the Luma application.
4. Platform spesific setup files.
5. Luma spesific development and deployment tools.
6. The Luma project file. This file is generated by ``lumarcc.py``.
7. The Luma resource file. This file is generated by ``lumarcc.py`` in and is 
   used for creating the ``resources.py`` file, which contains compiled icons 
   and translation files.

Coding Style
============
You should follow PEP8_ when writing Python source code for Luma. 
Especially you should use

- 4 spaces for indentation
- CamelCase for methods name
- a maximum of 79 characters per line for code
- a miximum of 72 characters per line for docstrings
- one newline between class methods.
- two newlines between module methods.
- double underscore for *private* attributes and methods.
- python properties for getters and setter
- import statements as described in PEP328_

.. tip::
    These coding style guidelines is **only guidelines**. The first priority is 
    allways to write well documented and readable code. If the mentioned 
    guidelines renders your implementation less readable or understandable, you
    are free to (and should) bypass the affected guideline, and perhaps 
    consider proposing modifications to the **Luma coding style guidelines**.

.. _PEP8: http://www.python.org/dev/peps/pep-0008/
.. _PEP328: http://www.python.org/dev/peps/pep-0328/

Source code headers
-------------------
If you contribute new modules to the Luma base application, you should provide
sufficient information about the source code. This include at least your name
and a license notice.

.. tip::
    The base Luma application is released under the *GNU General Public License
    version 2*, and so should yours, if it is to be included in the base 
    distribution. Either way, if you have some external demands, the pick of 
    license _must_ be compatible with the GPL [3]_


**Default Luma source code header**::

    # -*- coding: utf-8 -*-
    #
    # package.module
    #
    # Copyright (c) <year>
    #      Your Name, <your@email.address>
    #
    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program.  If not, see http://www.gnu.org/licenses/
    # 
    # vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4


Source code documentation
-------------------------
Python source code should allways be documented. First of all methods should
include a standard python docstring, describing the purpose of the method.
Further more we belive that code code can be written without the need for
inline comments. In some cases this is of course necessary.

If you modify large blocks of code in a file, you might consider keeping the 
old codeblock in the file by commenting it out with the ``#`` character. You
should also add some information in relation to your new code, summarizing
the changes you have made.

**Example**::

    class Cosmik(object):
        """This class mimics the essence of the legend of Frank Zappa
        """

        ...

        def debris(self, *args, **kwargs):
            """Generates debris of the Cosmik kind.

            @return:
                A list of cosmik debris is returned if some conditions is
                met, the empty list [] if not.
            """
            cosmikDebris = []
            for x in self.__someInternalStuff():
                if someCondition is met for x:
                    cosmikDebris.append(x)
            return cosmikDebris

        ...

Development tools
=================
There exists a number of tools that can be helpful when developing python and 
PyQt4 code. We also have produced some tools spesific for the Luma development 
and deployment process.


Python and PyQt4 development tools
----------------------------------
- **Qt4 Designer**:
  This application is part of the Qt framework, which is
  helpful for creating Qt graphical interfaces. You can create the GUI design
  and use the PyQt4 tool ``pyuic4`` to generate python source code from it.
- **Qt4 Linguist**: 
  This application is part of the Qt framework, and is used
  for the internationalization process for the application.


Luma spesific development tools
-------------------------------
Luma spesific tools is located in the `tools` directory in the repository.

- **lumarcc.py**: This script automates the process of generating application 
  resources. It currently supports dynamically building the project file
  (``luma.pro``) and the resource file (``luma.qrc``), compiling Qt4 Designer 
  files to python code.
- **lumadoc.py**: This script automates the process of generating the 
  documentation.


.. [3] http://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses

